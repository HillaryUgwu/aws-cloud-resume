AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  cloudResume

  Sample SAM Template for cloudResume

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    # MemorySize: 128
Parameters:
  HostedZoneId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: "R53 hosted zone ID used for the domain"
    Default: /HostedZoneId
  AcmCertificateArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: "ACM Certificate arn from parameter store"
    Default: /AcmCertificateArn
  WebDomainName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: "Naked domain name of the website"
    Default: /WebDomainName

Resources:
  countFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/backend/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: cloud-resume-challenge
      Events:
        cloudResume:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /resume
            Method: get

  ResumeWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketName: !Ref WebDomainName

  RedirectBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref ResumeWebsiteBucket
          Protocol: https
      BucketName: !Join [".", ["www", !Ref WebDomainName]]

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ResumeWebsiteBucket
      PolicyDocument:
        Id: CloudFrontPrivateContentPolicy
        Version: 2012-10-17
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal: 
              Service: !Sub "cloudfront.${AWS::URLSuffix}"
            Action: "S3:GetObject"
            Resource: !Sub "${ResumeWebsiteBucket.Arn}/*"
            Condition:
              # ArnEquals:
              #   "aws:SourceArn": !Sub "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${MyCloudfrontDistribution}"
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${MyCloudfrontDistribution}

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloud-resume-challenge
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "guest_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "guest_id"
          KeyType: "HASH"

  MyRoute53Record:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Ref ResumeWebsiteBucket
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 #Native to cloudfront
            DNSName: !GetAtt MyCloudfrontDistribution.DomainName
  
  RedirectRecord:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Ref RedirectBucket
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 #Native to cloudfront
            DNSName: !GetAtt RedirectDistribution.DomainName

  CloudFrontOriginAccessControl:
    Type: "AWS::CloudFront::OriginAccessControl"
    Properties:
      OriginAccessControlConfig:
        Description: !Ref "AWS::StackName"
        Name: !Ref "AWS::StackName"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  MyCloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref ResumeWebsiteBucket
          # - !Join [".", ["www", !Ref WebDomainName]]
        Comment: "Cloudfront distribution for serverless website"
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId:
            !Select [2, !Split ["/", !GetAtt ResumeWebsiteBucket.WebsiteURL]]
          # DefaultTTL: 0
          # MinTTL: 0
          # MaxTTL: 0
          # ForwardedValues:
          #   QueryString: false
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # Managed-CachingOptimized
          Compress: true
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
        Origins:
          - DomainName: !GetAtt WebBucket.RegionalDomainName
              # !Select [2, !Split ["/", !GetAtt ResumeWebsiteBucket.WebsiteURL]]
            Id: !Sub "${ResumeWebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com"
            # OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
            S3OriginConfig: {}
            # CustomOriginConfig:
            #   OriginProtocolPolicy: http-only
        PriceClass: PriceClass_100
        Enabled: true
        DefaultRootObject: index.html
  
  RedirectDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref RedirectBucket
        Comment: "Cloudfront distribution for serverless website"
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId:
            !Select [2, !Split ["/", !GetAtt RedirectBucket.WebsiteURL]]
          # DefaultTTL: 0
          # MinTTL: 0
          # MaxTTL: 0
          # ForwardedValues:
          #   QueryString: false
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # Managed-CachingOptimized
          Compress: true
          OriginRequestPolicyId: "acba4595-bd28-49b8-b9fe-13317c0390fa" # Managed-UserAgentRefererHeaders
        Origins:
          - DomainName:
              !Select [2, !Split ["/", !GetAtt RedirectBucket.WebsiteURL]]
            Id: !Sub "${RedirectBucket}.s3-website-${AWS::Region}.amazonaws.com"
            # OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            # S3OriginConfig: {}
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        PriceClass: PriceClass_100
        Enabled: true
        # DefaultRootObject: index.html


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  cloudResumeApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/resume/"
  countFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt countFunction.Arn
  countFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt countFunctionRole.Arn
